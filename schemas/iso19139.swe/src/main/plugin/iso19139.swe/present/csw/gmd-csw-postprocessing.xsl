<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0"
                xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:gco="http://www.isotc211.org/2005/gco"
                xmlns:gml="http://www.opengis.net/gml/3.2"
                xmlns:gmlOld="http://www.opengis.net/gml"
                xmlns:gmd="http://www.isotc211.org/2005/gmd"
                xmlns:gmx="http://www.isotc211.org/2005/gmx"
                xmlns:srv="http://www.isotc211.org/2005/srv" xmlns:gse="http://www.geodata.se/gse"
                xmlns:lst="http://www.lansstyrelsen.se"
                xmlns:skos="http://www.w3.org/2004/02/skos/core#"
                xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
                exclude-result-prefixes="#all">

  <xsl:output method="xml" encoding="UTF-8" omit-xml-declaration="yes" indent="yes"/>

  <xsl:param name="thesauriDir"></xsl:param>

  <xsl:variable name="inspire-thesaurus" select="document(concat('file:///', $thesauriDir, '/external/thesauri/theme/inspire-theme.rdf'))"/>
  <xsl:variable name="inspire-theme" select="$inspire-thesaurus//skos:Concept"/>

  <!-- Template for Copy data -->
  <xsl:template name="copyData" match="@*|node()">
    <xsl:copy copy-namespaces="no">
      <xsl:apply-templates select="@*|node()"/>
    </xsl:copy>
  </xsl:template>

  <xsl:template match="gmlOld:*">
    <xsl:element name="{name()}" namespace="http://www.opengis.net/gml/3.2">
      <xsl:copy-of select="namespace::*[not(name() = 'gml')]" copy-namespaces="no" />

      <xsl:for-each select="@gmlOld:*">
        <xsl:attribute name="{name()}" namespace="http://www.opengis.net/gml/3.2">
          <xsl:value-of select="."/>
        </xsl:attribute>
      </xsl:for-each>

      <xsl:apply-templates select="@*[namespace-uri() != 'http://www.opengis.net/gml']|node()"/>
    </xsl:element>
  </xsl:template>

  <!-- Some metadata has duplicated gml:id with value GSE002: change it by autogenerated value to avoid xsd errors -->
  <xsl:template match="gmlOld:Polygon[@gmlOld:id='GSE002']/@gmlOld:id" priority="100">
    <xsl:attribute name="id" namespace="http://www.opengis.net/gml/3.2" select="generate-id(.)"></xsl:attribute>
  </xsl:template>

  <!-- Some metadata has duplicated gml:id with value GSE002: change it by autogenerated value to avoid xsd errors -->
  <xsl:template match="gml:Polygon[@gml:id='GSE002']/@gml:id" priority="100">
    <xsl:attribute name="id" namespace="http://www.opengis.net/gml/3.2" select="generate-id(.)"></xsl:attribute>
  </xsl:template>

  <xsl:template match="@gmlOld:*">
    <xsl:attribute name="{name()}" namespace="http://www.opengis.net/gml/3.2">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>

  <xsl:template match="gmd:LanguageCode">
    <xsl:copy copy-namespaces="no">
      <xsl:attribute name="codeList">http://www.loc.gov/standards/iso639-2/</xsl:attribute>

      <xsl:choose>
        <xsl:when test="@codeListValue = 'sv'">
          <xsl:attribute name="codeListValue">swe</xsl:attribute>
          <xsl:copy-of select="@*[not(name() = 'codeList') and not(name() = 'codeListValue')]" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:copy-of select="@*[not(name() = 'codeList')]" />
        </xsl:otherwise>
      </xsl:choose>

      <xsl:apply-templates select="*" />
    </xsl:copy>
  </xsl:template>

  <!--<xsl:template match="*[@codeListValue]">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*" />

      <xsl:choose>
        <xsl:when test="string(.)"><xsl:value-of select="."/></xsl:when>
        <xsl:otherwise><xsl:value-of select="@codeListValue"/></xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>-->

  <!-- remove namespace declaration of gse from root element -->
  <xsl:template match="gmd:MD_Metadata">
    <xsl:message>CSW postprocessing - dataset metadata</xsl:message>

    <xsl:element name="{name()}" namespace="{namespace-uri()}">
      <xsl:copy-of select="namespace::*[not(name() = 'gse') and not(name() = 'gml')]" />
      <xsl:namespace name="gmx" select="'http://www.isotc211.org/2005/gmx'"/>
      <xsl:namespace name="gml" select="'http://www.opengis.net/gml/3.2'"/>

      <!-- Fixed value for schemaLocation -->
      <xsl:attribute name="xsi:schemaLocation">http://www.isotc211.org/2005/gmd https://inspire.ec.europa.eu/draft-schemas/inspire-md-schemas-temp/apiso-inspire/apiso-inspire.xsd</xsl:attribute>
      <xsl:apply-templates select="@*[name() != 'xsi:schemaLocation']"/>

      <xsl:apply-templates select="gmd:fileIdentifier" />
      <xsl:apply-templates select="gmd:language" />
      <xsl:apply-templates select="gmd:characterSet" />
      <xsl:apply-templates select="gmd:parentIdentifier" />
      <xsl:apply-templates select="gmd:hierarchyLevel" />
      <xsl:apply-templates select="gmd:hierarchyLevelName" />

      <!-- Add required gmd:hierarchyLevelName for services if missing -->
      <xsl:if test="not(gmd:hierarchyLevelName) and count(//srv:SV_ServiceIdentification) > 0">
        <gmd:hierarchyLevelName>
          <gco:CharacterString>Tj√§nst</gco:CharacterString>
        </gmd:hierarchyLevelName>
      </xsl:if>

      <xsl:apply-templates select="gmd:contact" />
      <xsl:apply-templates select="gmd:dateStamp" />
      <xsl:apply-templates select="gmd:metadataStandardName" />
      <xsl:apply-templates select="gmd:metadataStandardVersion" />
      <xsl:apply-templates select="gmd:dataSetURI" />
      <xsl:apply-templates select="gmd:locale" />
      <xsl:apply-templates select="gmd:spatialRepresentationInfo" />
      <xsl:apply-templates select="gmd:referenceSystemInfo" />
      <xsl:apply-templates select="gmd:metadataExtensionInfo" />
      <xsl:apply-templates select="gmd:identificationInfo" />
      <xsl:apply-templates select="gmd:contentInfo" />
      <xsl:apply-templates select="gmd:distributionInfo" />
      <xsl:apply-templates select="gmd:dataQualityInfo" />
      <xsl:apply-templates select="gmd:portrayalCatalogueInfo" />
      <xsl:apply-templates select="gmd:metadataConstraints" />
      <xsl:apply-templates select="gmd:applicationSchemaInfo" />
      <xsl:apply-templates select="gmd:metadataMaintenance" />
      <xsl:apply-templates select="gmd:series" />
      <xsl:apply-templates select="gmd:describes" />
      <xsl:apply-templates select="gmd:propertyType" />
      <xsl:apply-templates select="gmd:featureType" />
      <xsl:apply-templates select="gmd:featureAttribute" />
    </xsl:element>
  </xsl:template>


  <xsl:template match="gmd:metadataStandardName">
    <gmd:metadataStandardName>
      <gco:CharacterString>SS-EN ISO 19115:2005-geodata.se</gco:CharacterString>
    </gmd:metadataStandardName>
  </xsl:template>

  <xsl:template match="gmd:metadataStandardVersion">
    <gmd:metadataStandardVersion>
      <gco:CharacterString>4.0</gco:CharacterString>
    </gmd:metadataStandardVersion>
  </xsl:template>

  <!-- INSPIRE Validator requires publication date -->
  <xsl:template match="gmd:specification/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:dateType">
    <gmd:dateType>
      <gmd:CI_DateTypeCode codeList="http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode"
                           codeListValue="publication">publication</gmd:CI_DateTypeCode>
    </gmd:dateType>
  </xsl:template>

  <xsl:template match="gmd:MD_DataIdentification">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*" />

      <xsl:apply-templates select="gmd:citation" />
      <xsl:apply-templates select="gmd:abstract" />
      <xsl:apply-templates select="gmd:purpose" />
      <xsl:apply-templates select="gmd:credit" />
      <xsl:apply-templates select="gmd:status" />
      <xsl:apply-templates select="gmd:pointOfContact" />
      <xsl:apply-templates select="gmd:resourceMaintenance" />
      <xsl:apply-templates select="gmd:graphicOverview" />
      <xsl:apply-templates select="gmd:resourceFormat" />
      <xsl:apply-templates select="gmd:descriptiveKeywords" />

      <xsl:if test="not(gmd:descriptiveKeywords[gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/text() = 'Spatial scope'])">
        <gmd:descriptiveKeywords>
          <gmd:MD_Keywords>
            <gmd:keyword>
              <gmx:Anchor xlink:href="http://inspire.ec.europa.eu/metadata-codelist/SpatialScope/national">Nationell</gmx:Anchor>
            </gmd:keyword>
            <gmd:thesaurusName>
              <gmd:CI_Citation>
                <gmd:title>
                  <gmx:Anchor xlink:href="http://inspire.ec.europa.eu/metadata-codelist/SpatialScope">Spatial scope</gmx:Anchor>
                </gmd:title>
                <gmd:date>
                  <gmd:CI_Date>
                    <gmd:date>
                      <gco:Date>2019-05-22</gco:Date>
                    </gmd:date>
                    <gmd:dateType>
                      <gmd:CI_DateTypeCode codeList="http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode" codeListValue="publication">publication</gmd:CI_DateTypeCode>
                    </gmd:dateType>
                  </gmd:CI_Date>
                </gmd:date>
              </gmd:CI_Citation>
            </gmd:thesaurusName>
          </gmd:MD_Keywords>
        </gmd:descriptiveKeywords>
      </xsl:if>

      <xsl:apply-templates select="gmd:resourceSpecificUsage" />

      <!-- Copy resource constraints with gmd:MD_Constraints or gmd:MD_SecurityConstraints -->
      <xsl:apply-templates select="gmd:resourceConstraints[not(gmd:MD_LegalConstraints)]" />

      <!-- Copy resource constraints with gmd:MD_LegalConstraints and not gmd:otherConstraints or restriction code != 'otherRestrictions'  -->
      <xsl:apply-templates select="gmd:resourceConstraints[gmd:MD_LegalConstraints[not(gmd:otherConstraints) or */gmd:MD_RestrictionCode/@codeListValue != 'otherRestrictions']]" />

      <!-- Check if has INSPIRE limitationsOnPublicAccess -->
      <xsl:variable name="limitationsOnPublicAccess" select="count(gmd:resourceConstraints[gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')])" />

      <xsl:variable name="hasLimitationsOnPublicAccess" select="$limitationsOnPublicAccess > 0" />

      <!-- Check if has INSPIRE conditionsApplyingToAccessAndUse -->
      <xsl:variable name="conditionsApplyingToAccessAndUse" select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse')]" />

      <xsl:variable name="hasConditionsApplyingToAccessAndUse" select="count($conditionsApplyingToAccessAndUse) > 0" />


      <xsl:variable name="otherConstraintsTypes" select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')) and
        not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse'))]" />

      <xsl:variable name="hasOtherConstraintsTypes" select="count($otherConstraintsTypes)  > 0" />

      <!--<xsl:message>hasLimitationsOnPublicAccess: <xsl:value-of select="$hasLimitationsOnPublicAccess" /></xsl:message>
      <xsl:message>hasConditionsApplyingToAccessAndUse: <xsl:value-of select="$hasConditionsApplyingToAccessAndUse" /></xsl:message>
      <xsl:message>hasOtherConstraintsTypes: <xsl:value-of select="$hasOtherConstraintsTypes" /></xsl:message>-->

      <!-- Copy INSPIRE limitationsOnPublicAccess -->
      <xsl:apply-templates select="gmd:resourceConstraints[gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')]" />


      <xsl:choose>
        <!-- If has INSPIRE conditionsApplyingToAccessAndUse, copy the first one and add any other gmd:MD_LegalConstraints/gmd:otherConstraints
             not related to INSPIRE limitationsOnPublicAccess as children -->
        <xsl:when test="$hasConditionsApplyingToAccessAndUse">
          <xsl:for-each select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
            starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse')][1]">

            <xsl:copy copy-namespaces="no">
              <xsl:copy-of select="@*" />

              <xsl:for-each select="gmd:MD_LegalConstraints">
                <xsl:copy copy-namespaces="no">
                  <xsl:copy-of select="@*" />

                  <xsl:copy-of select="*[name() != 'gmd:useLimitation']" copy-namespaces="no" />

                  <!-- Add any other gmd:MD_LegalConstraints/gmd:otherConstraints
                       not related to INSPIRE limitationsOnPublicAccess as children -->
                  <xsl:for-each select="$conditionsApplyingToAccessAndUse/gmd:MD_LegalConstraints/gmd:otherConstraints">
                    <xsl:if test="position() > 1">
                      <xsl:copy-of select="." copy-namespaces="no" />
                    </xsl:if>
                  </xsl:for-each>

                  <xsl:for-each select="$otherConstraintsTypes/gmd:MD_LegalConstraints/gmd:otherConstraints">
                    <xsl:copy-of select="." copy-namespaces="no" />
                  </xsl:for-each>
                </xsl:copy>
              </xsl:for-each>

            </xsl:copy>
          </xsl:for-each>


        </xsl:when>
        <!-- If doesn't have INSPIRE conditionsApplyingToAccessAndUse, copy the first gmd:MD_LegalConstraints/gmd:otherConstraints
             not related to INSPIRE limitationsOnPublicAccess and all the others as children -->
        <xsl:when test="$hasOtherConstraintsTypes">
          <xsl:for-each select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
            not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')) and
            not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse'))][1]">

            <xsl:copy copy-namespaces="no">
              <xsl:copy-of select="@*" />

              <xsl:for-each select="gmd:MD_LegalConstraints">
                <xsl:copy copy-namespaces="no">
                  <xsl:copy-of select="@*" />

                  <xsl:copy-of select="*[name() != 'gmd:useLimitation']" copy-namespaces="no" />

                  <!-- Add any other gmd:MD_LegalConstraints/gmd:otherConstraints
                       not related to INSPIRE limitationsOnPublicAccess as children -->
                  <xsl:for-each select="$otherConstraintsTypes/gmd:MD_LegalConstraints/gmd:otherConstraints">
                    <xsl:if test="position() > 1">
                      <xsl:copy-of select="." copy-namespaces="no" />
                    </xsl:if>
                  </xsl:for-each>
                </xsl:copy>
              </xsl:for-each>
            </xsl:copy>
          </xsl:for-each>
        </xsl:when>
      </xsl:choose>

      <xsl:apply-templates select="gmd:aggregationInfo" />
      <xsl:apply-templates select="gmd:spatialRepresentationType" />

      <!-- Add default value of vector if missing -->
      <xsl:if test="count(gmd:spatialRepresentationType) = 0">
        <gmd:spatialRepresentationType>
          <gmd:MD_SpatialRepresentationTypeCode codeListValue="vector"
                                                codeList="http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_SpatialRepresentationTypeCode" />
        </gmd:spatialRepresentationType>
      </xsl:if>

      <xsl:apply-templates select="gmd:spatialResolution" />
      <xsl:apply-templates select="gmd:language" />

      <!-- If only utf8 remove it, otherwise the interoperability tests fail as consider that is default and should not be added -->
      <xsl:if test="count(gmd:characterSet) > 0">
        <xsl:variable name="countUtf8" select="count(gmd:characterSet[*/@codeListValue = 'utf8']) " />
        <xsl:variable name="countNonUtf8" select="count(gmd:characterSet[*/@codeListValue != 'utf8' and */@codeListValue != '']) " />

        <xsl:choose>
          <!-- Remove gmd:characterSet as not required to specify utf8 (default value) -->
          <xsl:when test="($countUtf8 > 0) and ($countNonUtf8 = 0)"></xsl:when>

          <!-- Copy the elements -->
          <xsl:otherwise>
            <xsl:apply-templates select="gmd:characterSet[*/@codeListValue != '']" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>

      <xsl:apply-templates select="gmd:topicCategory" />
      <xsl:apply-templates select="gmd:environmentDescription" />
      <xsl:apply-templates select="gmd:extent" />
      <xsl:apply-templates select="gmd:supplementalInformation" />

    </xsl:copy>
  </xsl:template>

  <!-- Remove gmd:descriptiveKeywords for GEMET - INSPIRE themes version 1.0 (invalid name, missing comma) with template value (not valid): INSPIRE Tema -->
  <xsl:template match="gmd:descriptiveKeywords[(count(gmd:MD_Keywords/gmd:keyword) = 1) and (normalize-space(gmd:MD_Keywords/gmd:keyword/*/text()) = '--- INSPIRE Tema')  and gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/*/text() = 'GEMET - INSPIRE themes version 1.0']" priority="20" />

  <!-- Remove gmd:descriptiveKeywords for GEMET - INSPIRE themes, version 1.0 if no keyword values -->
  <xsl:template match="gmd:descriptiveKeywords[(count(gmd:MD_Keywords/gmd:keyword[string(normalize-space(*/text()))]) = 0) and gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/*/text() = 'GEMET - INSPIRE themes, version 1.0']" priority="20" />

  <!-- Remove gmd:descriptiveKeywords for INSPIRE Priority Dataset if no keyword values -->
  <xsl:template match="gmd:descriptiveKeywords[(count(gmd:MD_Keywords/gmd:keyword[string(normalize-space(*/text()))]) = 0) and gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/*/text() = 'INSPIRE priority data set']" priority="20" />

  <!-- Remove gmd:descriptiveKeywords for Initiativ if no keyword values -->
  <xsl:template match="gmd:descriptiveKeywords[(count(gmd:MD_Keywords/gmd:keyword[string(normalize-space(*/text()))]) = 0) and gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/*/text() = 'Initiativ']" priority="20" />

  <!-- remove all useLimitation (TODO: temporary change) -->
  <xsl:template match="gmd:useLimitation" />

  <xsl:template match="gmd:resourceConstraints/gmd:MD_Constraints" />

  <!-- remove the parent of DQ_UsabilityElement, if DQ_UsabilityElement is present -->
  <xsl:template match="*[gmd:DQ_UsabilityElement]"/>

  <!-- remove all aggregateInformation -->
  <xsl:template match="gmd:aggregateInformation"/>

  <!-- remove all topic categories for service type records -->
  <xsl:template match="//gmd:identificationInfo/srv:SV_ServiceIdentification/gmd:topicCategory"/>

  <!-- remove GeodataSe node with namespace gse and remove namespace gse declaration from metadata (see above) -->
  <xsl:template match="gse:GeodataSe"/>

  <!-- fix keyword value if value contains period character (.) -->
  <xsl:template match="gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword[contains(gco:CharacterString, '.')]">
    <xsl:variable name="keywordValue" select="gco:CharacterString" />
    <xsl:copy copy-namespaces="no">
      <gco:CharacterString><xsl:value-of select="substring-after($keywordValue,' ')" /></gco:CharacterString>
    </xsl:copy>
  </xsl:template>

  <!--  remove gmd:type node from gmd:MD_Keywords -->
  <xsl:template match="gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:type"/>


  <!--  remove gmd:function from gmd:onLine if present -->
  <xsl:template match="gmd:onLine/gmd:function"/>

  <!--  fix title for DQ_ConformanceResult -->
  <xsl:template match="gmd:DQ_ConformanceResult/gmd:specification/gmd:CI_Citation/gmd:title[gmx:Anchor/@xlink:href='http://data.europa.eu/eli/reg/2009/976' or
	      gmx:Anchor/@xlink:href='http://data.europa.eu/eli/reg/2010/1089']">
    <xsl:variable name="isService" select="count(//srv:SV_ServiceIdentification) > 0" />

    <xsl:copy copy-namespaces="no">
      <xsl:choose>
        <xsl:when test="$isService">
          <gco:CharacterString>Kommissionens f√∂rordning (EG) nr 976/2009 av den 19 oktober 2009 om genomf√∂rande av Europaparlamentets och r√•dets direktiv 2007/2/EG med avseende p√• n√§ttj√§nster</gco:CharacterString>
        </xsl:when>
        <xsl:otherwise>
          <gco:CharacterString>Kommissionens f√∂rordning (eu) nr 1089/2010 av den 23 november 2010 om genomf√∂rande av Europaparlamentets och r√•dets direktiv 2007/2/eg vad g√§ller interoperabilitet f√∂r rumsliga datam√§ngder och datatj√§nster</gco:CharacterString>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>


  <!--  fix date for DQ_ConformanceResult -->
  <xsl:template match="gmd:DQ_ConformanceResult/gmd:specification/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date[gmx:Anchor/@xlink:href='http://data.europa.eu/eli/reg/2009/976' or
	      gmx:Anchor/@xlink:href='http://data.europa.eu/eli/reg/2010/1089']">
    <xsl:variable name="isService" select="count(//srv:SV_ServiceIdentification) > 0" />

    <xsl:copy copy-namespaces="no">
      <xsl:choose>
        <xsl:when test="$isService">
          <gco:Date>2009-10-20</gco:Date>
        </xsl:when>
        <xsl:otherwise>
          <gco:Date>2010-12-08</gco:Date>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>

  <!--  fix pass for DQ_ConformanceResult -->
  <xsl:template match="gmd:DQ_ConformanceResult[gmd:specification/gmd:CI_Citation/gmd:title/gmx:Anchor/@xlink:href='http://data.europa.eu/eli/reg/2009/976' or
	      lower-case(normalize-space(gmd:specification/gmd:CI_Citation/gmd:title/gco:CharacterString)) = 'kommissionens f√∂rordning (eg) nr 976/2009 av den 19 oktober 2009 om genomf√∂rande av europaparlamentets och r√•dets direktiv 2007/2/eg med avseende p√• n√§ttj√§nster' or
	      gmd:specification/gmd:CI_Citation/gmd:title/gmx:Anchor/@xlink:href='http://data.europa.eu/eli/reg/2010/1089' or
	      lower-case(normalize-space(gmd:specification/gmd:CI_Citation/gmd:title/gco:CharacterString)) = 'kommissionens f√∂rordning (eu) nr 1089/2010 av den 23 november 2010 om genomf√∂rande av europaparlamentets och r√•dets direktiv 2007/2/eg vad g√§ller interoperabilitet f√∂r rumsliga datam√§ngder och datatj√§nster']/gmd:pass">
    <gmd:pass>
      <gco:Boolean>true</gco:Boolean>
    </gmd:pass>
  </xsl:template>

  <!--  remove spatial resolution if gco:Distance is not present or is empty -->
  <xsl:template match="gmd:spatialResolution[
							gmd:MD_Resolution/gmd:distance/gco:Distance[. = '']
							or
							normalize-space(gmd:MD_Resolution/gmd:distance/gco:Distance)='']" />

  <!-- Set gco:Distance in spatial resolution as float (2 decimals -->
  <xsl:template match="gmd:spatialResolution/gmd:MD_Resolution/gmd:distance[string(normalize-space(gco:Distance))]/gco:Distance">
    <xsl:variable name="value" select="." as="xs:float" />

    <xsl:copy copy-namespaces="no">
      <xsl:apply-templates select="@*" />

      <xsl:value-of select="format-number($value, '#.00')"/>
    </xsl:copy>
  </xsl:template>

  <!-- ensure codespace always comes after code -->
  <xsl:template match="gmd:referenceSystemInfo/gmd:MD_ReferenceSystem/gmd:referenceSystemIdentifier/gmd:RS_Identifier">
    <xsl:copy copy-namespaces="no">
      <xsl:apply-templates select="@*"/>
      <xsl:copy-of select="gmd:code" copy-namespaces="no"/>
      <xsl:copy-of select="gmd:codeSpace" copy-namespaces="no" />
    </xsl:copy>
  </xsl:template>

  <!-- rename element gmd:AbstractDQ_Completeness to gmd:DQ_CompletenessOmission -->
  <xsl:template match="gmd:AbstractDQ_Completeness">
    <gmd:DQ_CompletenessOmission>
      <xsl:apply-templates select="@*|node()"/>
    </gmd:DQ_CompletenessOmission>
  </xsl:template>

  <!-- remove following elements -->
  <xsl:template match="mdSGU" />
  <xsl:template match="gmd:applicationSchemaInfo" />

  <!-- Remove descriptiveKeywords if thesaurus title starts with 'SGU' text. -->
  <xsl:template match="gmd:descriptiveKeywords[starts-with(gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString, 'SGU')]" />

  <!-- end of InspireCSWProxy rules -->


  <!-- Additional rules which are not in InspireCSWProxy -->


  <!-- example of timeperiod
  <gml:TimePeriod gml:id="Temporal">
    <gml:beginPosition>1968</gml:beginPosition>
    <gml:endPosition />
  </gml:TimePeriod>-->

  <!-- add attribute @gml:id to gml:timeperiod if missing -->
  <xsl:template match="gmlOld:TimePeriod[not(@gmlOld:id) or normalize-space(@gmlOld:id)='' or normalize-space(@gmlOld:id)='Temporal']">
    <xsl:element name="gml:TimePeriod" namespace="http://www.opengis.net/gml/3.2">
      <xsl:choose>
        <xsl:when test="normalize-space(@gmlOld:id)='' or normalize-space(@gmlOld:id)='Temporal'">
          <xsl:attribute name="gml:id">
            <xsl:value-of select="generate-id(gmlOld:TimePeriod)"/>
          </xsl:attribute>
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute name="gml:id">
            <xsl:value-of select="@gmlOld:id"/>
          </xsl:attribute>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="gmlOld:beginPosition"/>
      <xsl:apply-templates select="gmlOld:endPosition"/>
    </xsl:element>
  </xsl:template>

  <!-- remove online at this place -->
  <!-- Comment for testing -->
  <!--<xsl:template match="//gmd:distributor/gmd:MD_Distributor/gmd:distributorTransferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine" />-->

  <!-- delete environmentDescription element -->
  <xsl:template match="//gmd:environmentDescription"/>

  <!-- extents correction -->
  <xsl:template match="gmd:geographicElement/gmd:EX_GeographicBoundingBox">
    <xsl:variable name="westValue" select="gmd:westBoundLongitude/gco:Decimal" as="xs:float" />
    <xsl:variable name="eastValue" select="gmd:eastBoundLongitude/gco:Decimal" as="xs:float" />
    <xsl:variable name="southValue" select="gmd:southBoundLatitude/gco:Decimal" as="xs:float" />
    <xsl:variable name="northValue" select="gmd:northBoundLatitude/gco:Decimal" as="xs:float"/>
    <xsl:copy copy-namespaces="no">
      <gmd:westBoundLongitude>
        <gco:Decimal><xsl:value-of select="format-number($westValue, '#.00')"/></gco:Decimal>
      </gmd:westBoundLongitude>
      <gmd:eastBoundLongitude>
        <xsl:choose>
          <xsl:when test="$westValue eq $eastValue">
            <gco:Decimal><xsl:value-of select="format-number($eastValue + 0.0001, '#.00')"/></gco:Decimal>
          </xsl:when>
          <xsl:otherwise>
            <gco:Decimal><xsl:value-of select="format-number($eastValue, '#.00')"/></gco:Decimal>
          </xsl:otherwise>
        </xsl:choose>
      </gmd:eastBoundLongitude>
      <gmd:southBoundLatitude>
        <gco:Decimal><xsl:value-of select="format-number($southValue, '#.00')"/></gco:Decimal>
      </gmd:southBoundLatitude>
      <gmd:northBoundLatitude>
        <xsl:choose>
          <xsl:when test="$southValue eq $northValue">
            <gco:Decimal><xsl:value-of select="format-number($northValue + 0.0001, '#.00')"/></gco:Decimal>
          </xsl:when>
          <xsl:otherwise>
            <gco:Decimal><xsl:value-of select="format-number($northValue, '#.00')"/></gco:Decimal>
          </xsl:otherwise>
        </xsl:choose>
      </gmd:northBoundLatitude>
    </xsl:copy>
  </xsl:template>

  <!-- end of additional rules -->


  <!-- 1. If metadata type is service, then
  (a) remove exisiting gmd:identificationInfo/srv:SV_ServiceIdentification/srv:couplingType
  (b) remove existing gmd:identificationInfo/srv:SV_ServiceIdentification/srv:containsOperations
  (c) create new element as <srv:couplingType gco:nilReason='missing'> and add it at proper place as follows:
    (c.1) If gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn is present, add srv:couplingType just before srv:operatesOn
    (c.2) If srv:operatesOn is missing, add srv:couplingType as last child of srv:SV_ServiceIdentification
  (d) create new element as <srv:containsOperations gco:nilReason='missing'> and add it at proper place as follows:
    (d.1) If gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn is present, add srv:containsOperations after srv:couplingType and before srv:operatesOn
    (d.2) If srv:operatesOn is missing, add srv:containsOperations as last child of srv:SV_ServiceIdentification -->
  <xsl:template match="gmd:MD_Metadata[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = 'service']/gmd:identificationInfo/srv:SV_ServiceIdentification" priority="10">
    <xsl:message>CSW postprocessing - service metadata</xsl:message>

    <xsl:copy copy-namespaces="no">
      <!--<xsl:apply-templates select="node()[not(self::srv:couplingType)][not(self::srv:containsOperations)][not(self::srv:operatesOn)][not(self::gmd:topicCategory)]"/>-->

      <xsl:apply-templates select="gmd:citation" />
      <xsl:apply-templates select="gmd:abstract" />
      <xsl:apply-templates select="gmd:purpose" />
      <xsl:apply-templates select="gmd:credit" />
      <xsl:apply-templates select="gmd:status" />
      <xsl:apply-templates select="gmd:pointOfContact" />
      <xsl:apply-templates select="gmd:resourceMaintenance" />
      <xsl:apply-templates select="gmd:graphicOverview" />
      <xsl:apply-templates select="gmd:resourceFormat" />
      <!-- Don't copy gmd:topicCategory -->
      <!--<xsl:apply-templates select="gmd:topicCategory" />-->

      <xsl:apply-templates select="gmd:descriptiveKeywords" />

      <xsl:if test="not(gmd:descriptiveKeywords[gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/text() = 'Spatial scope'])">
        <gmd:descriptiveKeywords>
          <gmd:MD_Keywords>
            <gmd:keyword>
              <gmx:Anchor xlink:href="http://inspire.ec.europa.eu/metadata-codelist/SpatialScope/national">Nationell</gmx:Anchor>
            </gmd:keyword>
            <gmd:thesaurusName>
              <gmd:CI_Citation>
                <gmd:title>
                  <gmx:Anchor xlink:href="http://inspire.ec.europa.eu/metadata-codelist/SpatialScope">Spatial scope</gmx:Anchor>
                </gmd:title>
                <gmd:date>
                  <gmd:CI_Date>
                    <gmd:date>
                      <gco:Date>2019-05-22</gco:Date>
                    </gmd:date>
                    <gmd:dateType>
                      <gmd:CI_DateTypeCode codeList="http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode" codeListValue="publication">publication</gmd:CI_DateTypeCode>
                    </gmd:dateType>
                  </gmd:CI_Date>
                </gmd:date>
              </gmd:CI_Citation>
            </gmd:thesaurusName>
          </gmd:MD_Keywords>
        </gmd:descriptiveKeywords>
      </xsl:if>

      <xsl:apply-templates select="gmd:resourceSpecificUsage" />

      <!-- Copy resource constraints with gmd:MD_Constraints or gmd:MD_SecurityConstraints -->
      <xsl:apply-templates select="gmd:resourceConstraints[not(gmd:MD_LegalConstraints)]" />

      <!-- Copy resource constraints with gmd:MD_LegalConstraints and not gmd:otherConstraints or restriction code != 'otherRestrictions'  -->
      <xsl:apply-templates select="gmd:resourceConstraints[gmd:MD_LegalConstraints[not(gmd:otherConstraints) or */gmd:MD_RestrictionCode/@codeListValue != 'otherRestrictions']]" />

      <!-- Check if has INSPIRE limitationsOnPublicAccess -->
      <xsl:variable name="limitationsOnPublicAccess" select="count(gmd:resourceConstraints[gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')])" />

      <xsl:variable name="hasLimitationsOnPublicAccess" select="$limitationsOnPublicAccess > 0" />

      <!-- Check if has INSPIRE conditionsApplyingToAccessAndUse -->
      <xsl:variable name="conditionsApplyingToAccessAndUse" select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse')]" />

      <xsl:variable name="hasConditionsApplyingToAccessAndUse" select="count($conditionsApplyingToAccessAndUse) > 0" />


      <xsl:variable name="otherConstraintsTypes" select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')) and
        not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse'))]" />

      <xsl:variable name="hasOtherConstraintsTypes" select="count($otherConstraintsTypes)  > 0" />

      <xsl:message>CSW postprocessing - hasLimitationsOnPublicAccess: <xsl:value-of select="$hasLimitationsOnPublicAccess" /></xsl:message>
      <xsl:message>CSW postprocessing - hasConditionsApplyingToAccessAndUse: <xsl:value-of select="$hasConditionsApplyingToAccessAndUse" /></xsl:message>
      <xsl:message>CSW postprocessing - hasOtherConstraintsTypes: <xsl:value-of select="$hasOtherConstraintsTypes" /></xsl:message>

      <!-- Copy INSPIRE limitationsOnPublicAccess -->
      <xsl:apply-templates select="gmd:resourceConstraints[gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
        starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')]" />


      <xsl:choose>
        <!-- If has INSPIRE conditionsApplyingToAccessAndUse, copy the first one and add any other gmd:MD_LegalConstraints/gmd:otherConstraints
             not related to INSPIRE limitationsOnPublicAccess as children -->
        <xsl:when test="$hasConditionsApplyingToAccessAndUse">
          <xsl:for-each select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
            starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse')][1]">

            <xsl:copy copy-namespaces="no">
              <xsl:copy-of select="@*" />

              <xsl:for-each select="gmd:MD_LegalConstraints">
                <xsl:copy copy-namespaces="no">
                  <xsl:copy-of select="@*" />

                  <xsl:copy-of select="*[name() != 'gmd:useLimitation']" copy-namespaces="no" />

                  <!-- Add any other gmd:MD_LegalConstraints/gmd:otherConstraints
                       not related to INSPIRE limitationsOnPublicAccess as children -->
                  <xsl:for-each select="$conditionsApplyingToAccessAndUse/gmd:MD_LegalConstraints/gmd:otherConstraints">
                    <xsl:if test="position() > 1">
                      <xsl:copy-of select="." copy-namespaces="no" />
                    </xsl:if>
                  </xsl:for-each>

                  <xsl:for-each select="$otherConstraintsTypes/gmd:MD_LegalConstraints/gmd:otherConstraints">
                    <xsl:copy-of select="." copy-namespaces="no" />
                  </xsl:for-each>
                </xsl:copy>
              </xsl:for-each>

            </xsl:copy>
          </xsl:for-each>


        </xsl:when>
        <!-- If doesn't have INSPIRE conditionsApplyingToAccessAndUse, copy the first gmd:MD_LegalConstraints/gmd:otherConstraints
             not related to INSPIRE limitationsOnPublicAccess and all the others as children -->
        <xsl:when test="$hasOtherConstraintsTypes">
          <xsl:for-each select="gmd:resourceConstraints[gmd:MD_LegalConstraints/*/gmd:MD_RestrictionCode/@codeListValue = 'otherRestrictions' and
            not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/LimitationsOnPublicAccess')) and
            not(starts-with(gmd:MD_LegalConstraints/gmd:otherConstraints/gmx:Anchor/@xlink:href, 'http://inspire.ec.europa.eu/metadata-codelist/ConditionsApplyingToAccessAndUse'))][1]">

            <xsl:copy copy-namespaces="no">
              <xsl:copy-of select="@*" />

              <xsl:for-each select="gmd:MD_LegalConstraints">
                <xsl:copy copy-namespaces="no">
                  <xsl:copy-of select="@*" />

                  <xsl:copy-of select="*[name() != 'gmd:useLimitation']" copy-namespaces="no" />

                  <!-- Add any other gmd:MD_LegalConstraints/gmd:otherConstraints
                       not related to INSPIRE limitationsOnPublicAccess as children -->
                  <xsl:for-each select="$otherConstraintsTypes/gmd:MD_LegalConstraints/gmd:otherConstraints">
                    <xsl:if test="position() > 1">
                      <xsl:copy-of select="." copy-namespaces="no" />
                    </xsl:if>
                  </xsl:for-each>
                </xsl:copy>
              </xsl:for-each>
            </xsl:copy>
          </xsl:for-each>
        </xsl:when>
      </xsl:choose>

      <xsl:apply-templates select="gmd:aggregationInfo" />
      <xsl:apply-templates select="srv:serviceType" />
      <xsl:apply-templates select="srv:serviceTypeVersion" />
      <xsl:apply-templates select="srv:accessProperties" />
      <xsl:apply-templates select="srv:restrictions" />
      <xsl:apply-templates select="srv:keywords" />
      <xsl:apply-templates select="srv:extent" />
      <xsl:apply-templates select="srv:coupledResource" />
      <!-- Don't copy srv:couplingType, srv:containsOperations, srv:operatesOn -->
      <!--<xsl:apply-templates select="srv:couplingType" />
      <xsl:apply-templates select="srv:containsOperations" />
      <xsl:apply-templates select="srv:operatesOn" />-->

      <xsl:choose>
        <xsl:when test="srv:operatesOn">
          <srv:couplingType>
            <xsl:attribute name="gco:nilReason">
              <xsl:value-of select="'missing'"/>
            </xsl:attribute>
          </srv:couplingType>

          <srv:containsOperations>
            <xsl:attribute name="gco:nilReason">
              <xsl:value-of select="'missing'"/>
            </xsl:attribute>
          </srv:containsOperations>

          <xsl:for-each select="srv:operatesOn">
            <xsl:copy copy-namespaces="no">
              <xsl:copy-of select="@*[name() != 'xlink:href']" />
              <xsl:attribute name="xlink:href">
                <xsl:choose>
                  <xsl:when test="contains(@xlink:href, '/csw?')">
                    <xsl:value-of select="concat('https://www.geodata.se/geodataportalen/srv/eng/csw-inspire?', substring-after(@xlink:href, '/csw?'))" />
                  </xsl:when>
                  <xsl:when test="contains(@xlink:href, '/csw-inspire?')">
                    <xsl:value-of select="concat('https://www.geodata.se/geodataportalen/srv/eng/csw-inspire?', substring-after(@xlink:href, '/csw-inspire?'))" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="@xlink:href" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>

              <xsl:copy-of select="*" copy-namespaces="no" />
            </xsl:copy>
          </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
          <srv:couplingType>
            <xsl:attribute name="gco:nilReason">
              <xsl:value-of select="'missing'"/>
            </xsl:attribute>
          </srv:couplingType>
          <srv:containsOperations>
            <xsl:attribute name="gco:nilReason">
              <xsl:value-of select="'missing'"/>
            </xsl:attribute>
          </srv:containsOperations>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>

  <!--2. If gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions is missing, then
  (a) for each gmd:distributionInfo/gmd:MD_Distribution/gmd:distributor,
    (a.1) create a clone(copy) of element gmd:MD_Distributor/gmd:distributorTransferOptions/gmd:MD_DigitalTransferOptions
    (a.2) create a new element gmd:transferOptions and add the cloned gmd:MD_DigitalTransferOptions under it.
  (b) Add all newly created gmd:transferOptions as children of gmd:distributionInfo/gmd:MD_Distribution (add after all existing children of gmd:MD_Distribution).-->
  <xsl:template match="/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution">
    <xsl:variable name="addtransferOptions">
      <xsl:for-each select="/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:distributor/*/gmd:distributorTransferOptions">

        <xsl:for-each select="gmd:MD_DigitalTransferOptions">
          <!-- Copy only only resources with url, name and protocol -->
          <xsl:variable name="onlineResources">
            <xsl:for-each select="gmd:onLine">
              <xsl:variable name="linkageValue" select="gmd:CI_OnlineResource/gmd:linkage/gmd:URL" />
              <xsl:variable name="protocolValue" select="gmd:CI_OnlineResource/gmd:protocol/*/text()" />

              <xsl:if test="string(normalize-space($linkageValue)) and string(normalize-space($protocolValue))">
                <xsl:copy-of select="." copy-namespaces="no" />
              </xsl:if>
            </xsl:for-each>
          </xsl:variable>

          <!-- Only add container if has valid online resources -->
          <xsl:if test="count($onlineResources/*) > 0">
            <gmd:transferOptions>
              <xsl:copy copy-namespaces="no">
                <xsl:copy-of select="@*" />
                <xsl:copy-of select="gmd:unitsOfDistribution" />
                <xsl:copy-of select="gmd:transferSize" />

                <xsl:copy-of select="$onlineResources" />

                <xsl:copy-of select="gmd:offLine" />
              </xsl:copy>
            </gmd:transferOptions>
          </xsl:if>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="addformatsOptions">
      <xsl:for-each select="/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:distributor/*/gmd:distributorFormat">
        <xsl:variable name="nameValue" select="gmd:MD_Format/gmd:name/gco:CharacterString" />
        <xsl:variable name="versionValue" select="gmd:MD_Format/gmd:version/gco:CharacterString" />

        <xsl:if test="string(normalize-space($nameValue)) and string(normalize-space($versionValue))">
          <gmd:distributionFormat>
            <xsl:copy-of select="gmd:MD_Format" copy-namespaces="no" />
          </gmd:distributionFormat>
        </xsl:if>
      </xsl:for-each>
    </xsl:variable>

    <xsl:copy copy-namespaces="no">
      <xsl:choose>
        <xsl:when test="not(gmd:distributionFormat)"><xsl:copy-of select="$addformatsOptions"/></xsl:when>
        <xsl:otherwise><xsl:apply-templates select="gmd:distributionFormat"/></xsl:otherwise>
      </xsl:choose>

      <xsl:apply-templates select="gmd:distributor"/>

      <!-- Always replace gmd:transferOptions with gmd:distributorTransferOptions content -->
      <xsl:copy-of select="$addtransferOptions"/>
    </xsl:copy>
  </xsl:template>

  <!-- 3. Remove non-digits from temporal dates -->
  <!-- Set indeterminatePosition to now on end date if begindate as value an enddate is empty -->
  <!-- Verify that GML ID has proper value -->
  <xsl:template match="gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gmlOld:TimePeriod">

    <xsl:element name="gml:TimePeriod" namespace="http://www.opengis.net/gml/3.2">
      <xsl:choose>
        <xsl:when test="normalize-space(@gmlOld:id)='' or normalize-space(@gmlOld:id)='Temporal'">
          <xsl:attribute name="gml:id">
            <xsl:value-of select="generate-id(gmlOld:TimePeriod)"/>
          </xsl:attribute>
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute name="gml:id">
            <xsl:value-of select="@gmlOld:id"/>
          </xsl:attribute>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:variable name="newBeginPosition" select="translate(gmlOld:beginPosition/text(), translate(.,'0123456789-',''), '')"/>
      <xsl:variable name="newEndPosition" select="translate(gmlOld:endPosition/text(), translate(.,'0123456789-',''), '')"/>

      <gml:beginPosition>

        <xsl:value-of select="$newBeginPosition"/>
      </gml:beginPosition>
      <gml:endPosition>
        <xsl:if test="not(string($newEndPosition))">
          <xsl:attribute name="indeterminatePosition">now</xsl:attribute>
        </xsl:if>

        <xsl:value-of select="$newEndPosition"/>
      </gml:endPosition>

    </xsl:element>
  </xsl:template>

  <!-- 4. For each gco:Date element, remove non-digits from date value -->
  <xsl:template match="gco:Date">
    <xsl:copy copy-namespaces="no">
      <xsl:variable name="newDate" select="translate(text(), translate(.,'0123456789-',''), '')"/>

      <xsl:choose>
        <!-- Handle year-month format not allowed in INSPIRE validator (requires YYYY-MM-DD) -->
        <xsl:when test="string-length($newDate) = 7">
          <xsl:value-of select="$newDate"/>-01
        </xsl:when>

        <!-- Handle year format not allowed in INSPIRE validator (requires YYYY) -->
        <xsl:when test="string-length($newDate) = 4">
          <xsl:value-of select="$newDate"/>-01-01
        </xsl:when>

        <xsl:otherwise>
          <xsl:value-of select="$newDate"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>

  <!-- 5. Remove temporal extent if empty beginPosition and endPosition -->
  <xsl:template match="gmd:temporalElement[gmd:EX_TemporalExtent/gmd:extent/gmlOld:TimePeriod/gmlOld:beginPosition]">

    <xsl:choose>
      <xsl:when test="not(string(gmd:EX_TemporalExtent/gmd:extent/gmlOld:TimePeriod/gmlOld:beginPosition))  and
                      not(string(gmd:EX_TemporalExtent/gmd:extent/gmlOld:TimePeriod/gmlOld:endPosition))">
        <!-- Remove element if empty values in beginPosition and endPosition -->
      </xsl:when>

      <xsl:otherwise>
        <xsl:copy copy-namespaces="no">
          <xsl:copy-of select="@*" />
          <xsl:apply-templates select="*" />
        </xsl:copy>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- 6. Verify that GML ID has a proper value -->
  <xsl:template match="@gmlOld:id">
    <xsl:choose>
      <xsl:when test="normalize-space(.)=''">
        <xsl:attribute name="gml:id">
          <xsl:value-of select="generate-id(.)"/>
        </xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
        <xsl:copy-of select="."/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <!-- Identifier change from Anchor to CharacterString -->
  <xsl:template match="gmd:identifier[gmd:MD_Identifier/gmd:code/gmx:Anchor]/gmd:MD_Identifier/gmd:code">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*" />

      <gco:CharacterString><xsl:value-of select="gmx:Anchor/@xlink:href" /></gco:CharacterString>
    </xsl:copy>
  </xsl:template>

  <!-- Remove gmd:identifier with empty code -->
  <xsl:template match="gmd:identifier[gmd:MD_Identifier/gmd:code[@gco:nilReason='missing' and not(string(gco:CharacterString))]]" />

  <!-- Fixed values for GEMET thesaurus name. Date type requires text value also -->
  <xsl:template match="gmd:thesaurusName[gmd:CI_Citation/gmd:title/*/text() = 'GEMET - INSPIRE themes, version 1.0']">
    <gmd:thesaurusName>
      <gmd:CI_Citation>
        <gmd:title>
          <gmx:Anchor xlink:href="http://www.eionet.europa.eu/gemet/inspire_themes">GEMET - INSPIRE themes, version 1.0</gmx:Anchor>
        </gmd:title>
        <gmd:date>
          <gmd:CI_Date>
            <gmd:date>
              <gco:Date>2008-06-01</gco:Date>
            </gmd:date>
            <gmd:dateType>
              <gmd:CI_DateTypeCode codeListValue="publication" codeList="https://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode">publication</gmd:CI_DateTypeCode>
            </gmd:dateType>
          </gmd:CI_Date>
        </gmd:date>
      </gmd:CI_Citation>
    </gmd:thesaurusName>
  </xsl:template>


  <!-- Remove gmd:verticalElement in no valid values -->
  <xsl:template match="gmd:verticalElement">
    <xsl:variable name="minimumValue" select="gmd:EX_VerticalExtent/gmd:minimumValue/gco:Real" />
    <xsl:variable name="maximumValue" select="gmd:EX_VerticalExtent/gmd:maximumValue/gco:Real" />

    <xsl:variable name="validMinimumValue" select="$minimumValue castable as xs:double" />
    <xsl:variable name="validMaximumValue" select="$maximumValue castable as xs:double" />
    <xsl:variable name="validVerticalCRS" select="count(gmd:EX_VerticalExtent/gmd:verticalCRS/*) > 0 or
  		(string(gmd:EX_VerticalExtent/gmd:verticalCRS/@xlink:title) and gmd:EX_VerticalExtent/gmd:verticalCRS/@xlink:title != '{{vertical_crs_datum}}')" />

    <xsl:if test="$validMinimumValue and $validMaximumValue and $validVerticalCRS">
      <xsl:copy copy-namespaces="no">
        <xsl:copy-of select="@*" />
        <xsl:apply-templates select="*" />
      </xsl:copy>
    </xsl:if>
  </xsl:template>

  <!-- Remove gmd:distributorFormat in no valid values -->
  <xsl:template match="gmd:distributorFormat">
    <xsl:variable name="nameValue" select="gmd:MD_Format/gmd:name/gco:CharacterString" />
    <xsl:variable name="versionValue" select="gmd:MD_Format/gmd:version/gco:CharacterString" />

    <xsl:if test="string(normalize-space($nameValue)) and string(normalize-space($versionValue))">
      <xsl:copy copy-namespaces="no">
        <xsl:copy-of select="@*" />
        <xsl:apply-templates select="*" />
      </xsl:copy>
    </xsl:if>
  </xsl:template>

  <!-- Remove gmd:distributionFormat in no valid values -->
  <xsl:template match="gmd:distributionFormat">
    <xsl:variable name="nameValue" select="gmd:MD_Format/gmd:name/gco:CharacterString" />
    <xsl:variable name="versionValue" select="gmd:MD_Format/gmd:version/gco:CharacterString" />

    <xsl:if test="string(normalize-space($nameValue)) and string(normalize-space($versionValue))">
      <xsl:copy copy-namespaces="no">
        <xsl:copy-of select="@*" />
        <xsl:apply-templates select="*" />
      </xsl:copy>
    </xsl:if>
  </xsl:template>

  <!-- Remove gmd:distributorTransferOptions if no online resources with valid values: url, name and protocol should be filled,
       and only copy filled online resources -->
  <xsl:template match="gmd:distributorTransferOptions">
    <xsl:variable name="onlineResources">
      <xsl:for-each select="gmd:MD_DigitalTransferOptions">
        <xsl:for-each select="gmd:onLine">
          <xsl:variable name="linkageValue" select="gmd:CI_OnlineResource/gmd:linkage/gmd:URL" />
          <xsl:variable name="protocolValue" select="gmd:CI_OnlineResource/gmd:protocol/*/text()" />

          <xsl:if test="string(normalize-space($linkageValue)) and string(normalize-space($protocolValue))">
            <xsl:copy-of select="." copy-namespaces="no" />
          </xsl:if>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:variable>

    <!-- Only add container if has  valid online resources -->
    <xsl:if test="count($onlineResources/*) > 0">
      <xsl:copy copy-namespaces="no">
        <xsl:copy-of select="@*" />

        <xsl:for-each select="gmd:MD_DigitalTransferOptions">
          <xsl:copy copy-namespaces="no">
            <xsl:copy-of select="@*" />
            <xsl:copy-of select="gmd:unitsOfDistribution" />
            <xsl:copy-of select="gmd:transferSize" />

            <xsl:copy-of select="$onlineResources" />

            <xsl:copy-of select="gmd:offLine" />
          </xsl:copy>
        </xsl:for-each>
      </xsl:copy>
    </xsl:if>

  </xsl:template>

  <!-- Remove gmd:transferOptions if no online resources with valid values: url, name and protocol should be filled,
       and only copy filled online resources -->
  <xsl:template match="gmd:transferOptions">
    <xsl:variable name="onlineResources">
      <xsl:for-each select="gmd:MD_DigitalTransferOptions">
        <xsl:for-each select="gmd:onLine">
          <xsl:variable name="linkageValue" select="gmd:CI_OnlineResource/gmd:linkage/gmd:URL" />
          <xsl:variable name="protocolValue" select="gmd:CI_OnlineResource/gmd:protocol/*/text()" />

          <xsl:if test="string(normalize-space($linkageValue)) and string(normalize-space($protocolValue))">
            <xsl:copy-of select="." copy-namespaces="no" />
          </xsl:if>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:variable>

    <!-- Only add container if has  valid online resources -->
    <xsl:if test="count($onlineResources/*) > 0">
      <xsl:copy copy-namespaces="no">
        <xsl:copy-of select="@*" />

        <xsl:for-each select="gmd:MD_DigitalTransferOptions">
          <xsl:copy copy-namespaces="no">
            <xsl:copy-of select="@*" />
            <xsl:copy-of select="gmd:unitsOfDistribution" />
            <xsl:copy-of select="gmd:transferSize" />

            <xsl:copy-of select="$onlineResources" />

            <xsl:copy-of select="gmd:offLine" />
          </xsl:copy>
        </xsl:for-each>

      </xsl:copy>
    </xsl:if>

  </xsl:template>


  <!-- Remove gmd:pointOfContact details if ALL (organisation name, email, phone and role) are empty -->
  <xsl:template match="gmd:pointOfContact">
    <xsl:variable name="organisationNameValue" select="gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString" />
    <xsl:variable name="electronicMailAddressValue" select="gmd:CI_ResponsibleParty/gmd:contactInfo/*/gmd:address/*/gmd:electronicMailAddress/gco:CharacterString" />
    <xsl:variable name="phoneValue" select="gmd:CI_ResponsibleParty/gmd:contactInfo/*/gmd:phone/*/gmd:electronicMailAddress/gco:CharacterString" />
    <xsl:variable name="roleValue" select="gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode/@codeListValue" />

    <xsl:if test="string(normalize-space($organisationNameValue)) or
                  string(normalize-space($phoneValue)) or
                  string(normalize-space($electronicMailAddressValue)) or
                  string(normalize-space($roleValue))">
      <xsl:copy copy-namespaces="no">
        <xsl:copy-of select="@*" />
        <xsl:apply-templates select="*" />
      </xsl:copy>
    </xsl:if>
  </xsl:template>


  <!-- Some metadata has empty distributor contact (cardinality is 1:1). Remove empty element -->
  <xsl:template match="gmd:distributor/gmd:MD_Distributor">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*" />

      <xsl:choose>
        <xsl:when test="count(gmd:distributorContact) > 1">
          <!-- Keep first with filled information -->
          <xsl:variable name="distributorContacts">
            <xsl:for-each select="gmd:distributorContact">
              <xsl:variable name="organisationNameValue" select="gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString" />
              <xsl:variable name="electronicMailAddressValue" select="gmd:CI_ResponsibleParty/gmd:contactInfo/*/gmd:address/*/gmd:electronicMailAddress/gco:CharacterString" />
              <xsl:variable name="phoneValue" select="gmd:CI_ResponsibleParty/gmd:contactInfo/*/gmd:phone/*/gmd:electronicMailAddress/gco:CharacterString" />
              <xsl:variable name="roleValue" select="gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode/@codeListValue" />

              <xsl:if test="string(normalize-space($organisationNameValue)) or
                  string(normalize-space($phoneValue)) or
                  string(normalize-space($electronicMailAddressValue)) or
                  string(normalize-space($roleValue))">
                <xsl:copy-of select="." />
              </xsl:if>
            </xsl:for-each>
          </xsl:variable>

          <xsl:choose>
            <xsl:when test="count($distributorContacts/*) > 0">
              <!-- Keep first with filled information -->
              <xsl:copy-of select="$distributorContacts[1]" copy-namespaces="no"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates select="gmd:distributorContact" />
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates select="gmd:distributorContact" />
        </xsl:otherwise>
      </xsl:choose>

      <xsl:apply-templates select="gmd:distributionOrderProcess" />
      <xsl:apply-templates select="gmd:distributorFormat" />
      <xsl:apply-templates select="gmd:distributorTransferOptions" />

    </xsl:copy>
  </xsl:template>

  <!-- Fix invalid gco:DateTime -->
  <xsl:template match="gco:DateTime">
    <xsl:variable name="value" select="." />

    <xsl:choose>
      <xsl:when test="string-length($value) &lt; 11">
        <gco:Date><xsl:value-of select="." /></gco:Date>
      </xsl:when>
      <xsl:otherwise>
        <xsl:copy-of select="." copy-namespaces="no" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Remove invalid lst namespace elements -->
  <xsl:template match="lst:*" />


  <!-- Remove non existing gmd:hierarchyLevelDescription that is defined in some metadata -->
  <xsl:template match="gmd:hierarchyLevelDescription" />

  <!-- Remove point of contact with invalid role value informationOwner  -->
  <xsl:template match="gmd:pointOfContact[gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode/@codeListValue = 'informationOwner']" />

  <!-- Update url in codeList -->
  <xsl:template match="*[@codeList and name() != 'gmd:LanguageCode']" priority="100">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*[name() != 'codeList']" />
      <xsl:attribute name="codeList">http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#<xsl:value-of select="tokenize(@codeList, '#')[2]"/></xsl:attribute>

      <xsl:value-of select="." />
    </xsl:copy>
  </xsl:template>

  <!-- Fix invalid characterset value: 004 or empty -->
  <xsl:template match="gmd:MD_CharacterSetCode[@codeListValue = '004' or @codeListValue = '']" priority="200">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*[name() != 'codeListValue' and name() != 'codeList']" />
      <xsl:attribute name="codeList">http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#<xsl:value-of select="tokenize(@codeList, '#')[2]"/></xsl:attribute>

      <xsl:attribute name="codeListValue">utf8</xsl:attribute>

      <xsl:value-of select="." />
    </xsl:copy>
  </xsl:template>


  <!-- Remove gmd:report with empty values in gmd:result -->
  <xsl:template match="gmd:report[gmd:DQ_DomainConsistency]">
    <xsl:variable name="specificationTitle" select="gmd:DQ_DomainConsistency/gmd:result/gmd:DQ_ConformanceResult/gmd:specification/*/gmd:title/*/text()" />
    <xsl:variable name="specificationDate" select="gmd:DQ_DomainConsistency/gmd:result/gmd:DQ_ConformanceResult/gmd:specification/*/gmd:date/*/gmd:date/*/text()" />

    <xsl:if test="string(normalize-space($specificationTitle)) and
			  	  string(normalize-space($specificationDate))
                  ">
      <xsl:copy copy-namespaces="no">
        <xsl:copy-of select="@*" />
        <xsl:apply-templates select="*" />
      </xsl:copy>
    </xsl:if>
  </xsl:template>

  <!-- Convert GEMET keywords to Anchors -->
  <xsl:template match="gmd:keyword[../gmd:thesaurusName/gmd:CI_Citation/gmd:title/*/text() = 'GEMET - INSPIRE themes, version 1.0' or
                                   ../gmd:thesaurusName/gmd:CI_Citation/gmd:title/*/text() = 'GEMET - INSPIRE themes version 1.0']">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*" />

      <xsl:choose>
        <xsl:when test="gco:CharacterString">
          <xsl:variable name="value" select="lower-case(gco:CharacterString)" />
          <xsl:variable name="key" select="$inspire-theme[skos:prefLabel[@xml:lang='sv' and lower-case(text()) = $value]]/@rdf:about" />

          <gmx:Anchor xlink:href="{$key}"><xsl:value-of select="gco:CharacterString" /></gmx:Anchor>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates select="*" />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>

  <xsl:template match="gmd:identificationInfo/*/gmd:citation/gmd:CI_Citation">
    <xsl:copy copy-namespaces="no">
      <xsl:apply-templates select="@*" />

      <xsl:apply-templates select="gmd:title" />
      <xsl:apply-templates select="gmd:alternateTitle" />

      <!-- Only 1 revision date is allowed - Keep the most recent -->
      <xsl:variable name="countRevisionDate" select="count(gmd:date[gmd:CI_Date/gmd:dateType/gmd:CI_DateTypeCode/@codeListValue = 'revision'])" />

      <xsl:choose>
        <xsl:when test="$countRevisionDate > 1">
          <xsl:apply-templates select="gmd:date[gmd:CI_Date/gmd:dateType/gmd:CI_DateTypeCode/@codeListValue != 'revision']" />

          <xsl:variable name="revisionDatesList">
            <dates>
              <xsl:for-each  select="gmd:date/gmd:CI_Date[gmd:dateType/gmd:CI_DateTypeCode/@codeListValue = 'revision']/gmd:date/*">
                <xsl:if test="string(.)">
                  <date><xsl:value-of select="." /></date>
                </xsl:if>
              </xsl:for-each>
            </dates>
          </xsl:variable>

          <xsl:for-each select="$revisionDatesList/dates/date">
            <xsl:sort select="." order="descending" />

            <xsl:if test="position() = 1">
              <gmd:date>
                <gmd:CI_Date>
                  <gmd:date>
                    <gco:Date><xsl:value-of select="." /></gco:Date>
                  </gmd:date>
                  <gmd:dateType>
                    <gmd:CI_DateTypeCode codeList="http://standards.iso.org/ittf/PubliclyAvailableStandards/ISO_19139_Schemas/resources/codelist/ML_gmxCodelists.xml#CI_DateTypeCode"
                                         codeListValue="revision"/>
                  </gmd:dateType>
                </gmd:CI_Date>
              </gmd:date>
            </xsl:if>
          </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates select="gmd:date" />
        </xsl:otherwise>
      </xsl:choose>


      <xsl:apply-templates select="gmd:edition" />
      <xsl:apply-templates select="gmd:editionDate" />
      <xsl:apply-templates select="gmd:identifier" />
      <xsl:apply-templates select="gmd:citedResponsibleParty" />
      <xsl:apply-templates select="gmd:presentationForm" />
      <xsl:apply-templates select="gmd:series" />
      <xsl:apply-templates select="gmd:otherCitationDetails" />
      <xsl:apply-templates select="gmd:collectiveTitle" />
      <xsl:apply-templates select="gmd:ISBN" />
      <xsl:apply-templates select="gmd:ISSN" />

    </xsl:copy>
  </xsl:template>

  <!-- Set the value to gmd:hierarchyLevel value -->
  <xsl:template match="gmd:level">
    <xsl:copy copy-namespaces="no">
      <xsl:apply-templates select="@*" />

      <xsl:choose>
        <xsl:when test="count(//gmd:hierarchyLevel[string(gmd:MD_ScopeCode/@codeListValue)]) > 0">
          <xsl:variable name="hierarchyLevelCodelistValue" select="//gmd:hierarchyLevel[string(gmd:MD_ScopeCode/@codeListValue)][1]/gmd:MD_ScopeCode/@codeListValue" />
          <xsl:variable name="hierarchyLevelValue" select="//gmd:hierarchyLevel[string(gmd:MD_ScopeCode/@codeListValue)][1]/gmd:MD_ScopeCode" />

          <gmd:MD_ScopeCode
            codeList="http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode"
            codeListValue="{$hierarchyLevelCodelistValue}"><xsl:value-of select="$hierarchyLevelValue"/></gmd:MD_ScopeCode>
        </xsl:when>
        <xsl:otherwise>
          <xsl:for-each select="gmd:MD_ScopeCode">
            <xsl:copy copy-namespaces="no">
              <xsl:apply-templates select="@*[name() != 'codeList']" />
              <xsl:attribute name="codeList">http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#<xsl:value-of select="tokenize(@codeList, '#')[2]"/></xsl:attribute>

              <xsl:apply-templates select="*" />
            </xsl:copy>
          </xsl:for-each>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>

  <!-- Service metadata: add gmd:levelDescription if missing -->
  <xsl:template match="gmd:scope/gmd:DQ_Scope[not(gmd:levelDescription) and count(//srv:SV_ServiceIdentification) > 0]">
    <xsl:copy copy-namespaces="no">
      <xsl:apply-templates select="@*" />

      <xsl:apply-templates select="gmd:level" />
      <xsl:apply-templates select="gmd:extent" />

      <gmd:levelDescription>
        <gmd:MD_ScopeDescription>
          <gmd:other>
            <gco:CharacterString>Tj√§nst</gco:CharacterString>
          </gmd:other>
        </gmd:MD_ScopeDescription>
      </gmd:levelDescription>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
